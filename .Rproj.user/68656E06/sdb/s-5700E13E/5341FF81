{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(DT)\nlibrary(plyr)\nlibrary(paxtoolsr)\nlibrary(SPARQL)\nlibrary(stringr)\n# Define server logic\n\n# Proxy settings\n\n#Sys.setenv(http_proxy=\"http://proxy.wifi.uma.es:3128/\")\n\n\n\n\n\ncreateLink <- function(val) {\n  sprintf('<a href=\"%s\" target=\"_blank\" class=\"btn btn-default\">GO</a>', val)\n}\n\n\ncreateImg <- function(val) {\n  db <- gsub(\"http://pathwaycommons.org/pc2/\",\"\",val)\n  url_img <- paste(db, \".png\", sep=\"\")\n  sprintf('<img src=\"%s\" class=\"img-rounded\" alt=\"%s\"></img>', url_img, db)\n}\n\nshinyServer(function(input, output) {\n\n  getResultsDf <- eventReactive(input$searchButton,{\n    term <- input$term \n    dataSources <- input$dataSources\n    organism <- input$organism\n    numberOfResults <- input$numberOfResults\n    \n    # Validation\n    if (term == \"\"){\n      showNotification(\"No term provided. Executing example query...\", type=\"error\")\n      term <- \"name:gl?coly*\"\n    }\n    if (is.null(dataSources)){\n      showNotification(\"No datasource selected. Searching on Reactome...\", type=\"error\")\n      dataSources <- \"reactome\"\n    }\n    if (numberOfResults<0 || numberOfResults>100){\n      showNotification(\"No valid number of results range (1:100). Showing 10 results...\", type=\"error\")\n      numberOfResults <- 10\n    }\n    \n    # Loading bar\n    withProgress(message = 'Loading', value = 0, {\n      incProgress(0.1, detail = paste(\"Searching on selected databases...\"))\n      searchResults <- searchPc(q = term, \n                                datasource = paste(dataSources, sep=\"&\"), \n                                type = \"Pathway\", organism = organism)\n      \n      incProgress(0.5, detail = paste(\"Parsing results...\"))\n      searchResultsDf <- ldply(xmlToList(searchResults), data.frame) \n      \n      incProgress(0.8, detail = paste(\"Simplifying results...\"))\n      searchResultsDf <- subset(searchResultsDf, .id==\"searchHit\") # we only keep searchHits (NOT .attrs)\n      headSearchResultsDf <- head(searchResultsDf,  numberOfResults) \n      \n      # If we have searchHit>=1 then create links, images and \n      # return a subset of the original dataframe\n      if(\"uri\" %in% colnames(headSearchResultsDf))\n      {\n        headSearchResultsDf$uri <- createLink(headSearchResultsDf$uri)\n        headSearchResultsDf$dataSource <- createImg(headSearchResultsDf$dataSource)\n        headSearchResultsDf <- headSearchResultsDf[, c(\"name\", \"dataSource\", \"numParticipants\", \"numProcesses\", \"size\", \"uri\")]\n      }\n      \n      incProgress(1.0, detail = paste(\"Done!\"))\n      finalSearchResultsDf <<- headSearchResultsDf # global variable\n    })\n    \n    return(finalSearchResultsDf)\n  })\n  \n  output$searchResults <-  renderDataTable({\n    return(getResultsDf())\n  }, options = list(pageLength = 10, searching = FALSE, lengthChange = FALSE), escape=FALSE, selection = 'single'\n  )\n  \n  getRowFromDf <- eventReactive(input$searchResults_rows_selected,{\n    strsplit(as.character(finalSearchResultsDf$uri[input$searchResults_rows_selected]), \"\\\"\")[[1]][2]\n  })\n  \n  output$selectedRow <- renderPrint(\n    getRowFromDf()\n    \n  )\n  \n  #while you didn`t press the search button the button \"Select\" will be hide`\n  \n  hide(\"Plotme\")\n  observeEvent(input$searchButton, {\n    toggle(\"Plotme\")\n    # toggle(\"plot\") if you want to alternate between hiding and showing\n  })\n  \n  \n  Sif <- reactive({\n    URI <- getRowFromDf()\n    withProgress(message = 'Extracting SIF', value = 0, {\n      incProgress(0.1, detail = paste('Path selected...'))\n      sif <- getPc(URI,\"BINARY_SIF\")\n      return(sif)\n    })\n  })\n  \n  #When you press the select button you are going to extract the sif file from the the row selected\n  ExtractSif <- eventReactive(input$Plotme,{\n    return(Sif())\n  })\n  \n  output$Summary <-  renderDataTable({\n    return(ExtractSif())\n  }, options = list(pageLength = 10, searching = FALSE, lengthChange = FALSE), escape=FALSE, selection = 'single'\n  )\n  \n  \n  #ANALYSIS PART\n  \n  endpoint <- \"http://rdf.pathwaycommons.org/sparql/\"\n  BiochemicalReactions <- reactive({\n    withProgress(message = 'Extracting information', value = 0, {\n      URL <- getRowFromDf()\n      URL <- paste0('<',URL,'>')\n      BiochemicalReaction <- sprintf('select ?nameReaction ?nleft ?nright ?leftReference ?rightReference  where {\\n\n                                     %s bp:pathwayComponent ?s.\\n\n                                     ?s a bp:BiochemicalReaction.\\n\n                                     ?s bp:left ?left.\\n\n                                     ?s bp:right ?right.\\n\n                                     ?s bp:displayName ?nameReaction.\\n\n                                     ?left bp:displayName ?nleft.\\n\n                                     ?right bp:displayName ?nright.\\n\n                                     ?left   <http://www.biopax.org/release/biopax-level3.owl#entityReference> ?leftReference.\\n\n                                     ?right <http://www.biopax.org/release/biopax-level3.owl#entityReference> ?rightReference.\\n\n    }',URL)\n    \n      BiochemicalReaction <- str_replace_all(BiochemicalReaction, \"[\\r\\n]\" , \"\")\n      BiochemicalReaction <- SPARQL(url=endpoint, BiochemicalReaction)$results\n      BiochemicalReaction$leftReference <- gsub(\"<|>\",\"\",BiochemicalReaction$leftReference)\n      BiochemicalReaction$rightReference <- gsub(\"<|>\",\"\",BiochemicalReaction$rightReference)\n      BiochemicalReaction$leftReference <- createLink(BiochemicalReaction$leftReference)\n      BiochemicalReaction$rightReference <- createLink(BiochemicalReaction$rightReference)\n      \n  })\n    return(BiochemicalReaction)\n})\n  \n  CatalysisReactions <- reactive({\n    withProgress(message = 'Extracting information', value = 0, {\n      URL <- getRowFromDf()\n      URL <- paste0('<',URL,'>')\n      Catalysis <- sprintf('select  ?nameController ?reference  ?nameControlled where {\\n\n                           %s bp:pathwayComponent ?Catalysis.\\n\n                           ?Catalysis a bp:Catalysis .\\n\n                           \n                           ?Catalysis bp:controller ?controller.\\n\n                           \n                           ?Catalysis bp:controlled ?controlled.\\n\n                           ?controller bp:entityReference ?reference.\\n\n                           ?controller bp:standardName ?nameController.\\n\n                           ?controlled bp:standardName ?nameControlled.\\n\n    }',URL)\n    Catalysis <- str_replace_all(Catalysis, \"[\\r\\n]\" , \"\")\n    Catalysis <- SPARQL(url=endpoint, Catalysis)$results\n    Catalysis$reference <- gsub(\"<|>\",\"\",Catalysis$reference)\n    Catalysis$reference <- createLink(Catalysis$reference)\n  })\n    return(Catalysis)\n    \n    })\n  ControlReactions <- reactive({\n    withProgress(message = 'Extracting information', value = 0, {\n      URL <- getRowFromDf()\n      URL <- paste0('<',URL,'>')\n      Control <- sprintf('select  ?nameController ?reference  ?nameControlled where {\\n\n                         %s bp:pathwayComponent ?ReactionControl.\\n\n                         ?ReactionControl a bp:Control .\\n\n                         ?ReactionControl bp:controller ?controller.\\n\n                         ?ReactionControl bp:controlled ?controlled.\\n\n                         ?controller bp:standardName ?nameController.\\n\n                         ?controlled bp:standardName ?nameControlled.\\n\n                         ?controller bp:entityReference ?reference. \\n\n    }',URL)\n    Control <- str_replace_all(Control, \"[\\r\\n]\" , \"\")\n    Control <- SPARQL(url=endpoint, Control)$results\n    Control$reference <- gsub(\"<|>\",\"\",Control$reference)\n    Control$reference <- createLink(Control$reference)\n  })\n    return(Control)\n    })\n  TemplateReactions <- reactive({\n    withProgress(message = 'Extracting information', value = 0, {\n      URL <- getRowFromDf()\n      URL <- paste0('<',URL,'>')\n      TemplateReaction <-sprintf('select * where {\\n\n                                 %s bp:pathwayComponent ?TemplateReaction.\\n\n                                 ?TemplateReaction a bp:TemplateReaction.\\n\n                                 ?TemplateReaction bp:product ?product. \\n\n                                 ?product bp:displayName ?name.\\n\n                                 ?product  bp:entityReference ?reference.\\n\n    }',URL)\n    \n      \n      TemplateReaction <- str_replace_all(TemplateReaction, \"[\\r\\n]\" , \"\")\n      TemplateReaction <- SPARQL(url=endpoint, TemplateReaction)$results\n      TemplateReaction$TemplateReaction <-  gsub(\"<|>\",\"\",TemplateReaction$TemplateReaction)\n      TemplateReaction$TemplateReaction <- createLink(TemplateReaction$TemplateReaction)\n      TemplateReaction$product <-  gsub(\"<|>\",\"\",TemplateReaction$product)\n      TemplateReaction$product <- createLink(TemplateReaction$product)\n      TemplateReaction$reference <-  gsub(\"<|>\",\"\",TemplateReaction$reference)\n      TemplateReaction$reference <- createLink(TemplateReaction$reference)\n  })\n    return(TemplateReaction)\n    \n    })\n  TemplateReactionRegulations <- reactive({\n    withProgress(message = 'Extracting information', value = 0, {\n      URL <- getRowFromDf()\n      URL <- paste0('<',URL,'>')\n      TemplateReactionRegulation <- sprintf('select ?nameController ?reference ?controller where {\\n\n                                            %s bp:pathwayComponent ?TemplateReactionRegulation.\\n\n                                            ?TemplateReactionRegulation a bp:TemplateReactionRegulation.\\n\n                                            ?TemplateReactionRegulation bp:controlled ?controlled.\\n\n                                            ?TemplateReactionRegulation bp:controller ?controller.\\n\n                                            ?controller bp:displayName ?nameController.\\n\n                                            ?controller bp:entityReference ?reference.\\n\n    }',URL)\n    TemplateReactionRegulation <- str_replace_all(TemplateReactionRegulation, \"[\\r\\n]\" , \"\")\n    TemplateReactionRegulation <- SPARQL(url=endpoint, TemplateReactionRegulation)$results\n    TemplateReactionRegulation$reference <- gsub(\"<|>\",\"\",TemplateReactionRegulation$reference)\n    TemplateReactionRegulation$reference <- createLink(TemplateReactionRegulation$reference)\n    TemplateReactionRegulation$controller <- gsub(\"<|>\",\"\",TemplateReactionRegulation$controller)\n    TemplateReactionRegulation$controller <- createLink(TemplateReactionRegulation$controller)\n  })\n    return(TemplateReactionRegulation)\n    })\n  DegradationReactions <- reactive({\n    withProgress(message = 'Extracting information', value = 0, {\n      URL <- getRowFromDf()\n      URL <- paste0('<',URL,'>')\n      Degradation <- sprintf('select * where {\\n\n                             %s bp:pathwayComponent ?Degradation.\\n\n                             ?Degradation a bp:Degradation .\\n\n                             ?Degradation bp:displayName ?name. \\n\n    }',URL)\n    Degradation <- str_replace_all(Degradation, \"[\\r\\n]\" , \"\")\n    Degradation <- SPARQL(url=endpoint, Degradation)$results\n    Degradation$Degradation <- gsub(\"<|>\",\"\",Degradation$Degradation)\n    Degradation$Degradation <- createLink(Degradation$Degradation)\n  })\n    return(Degradation)\n    })\n  ModulationReactions <- reactive({\n    withProgress(message = 'Extracting information', value = 0, {\n      URL <- getRowFromDf()\n      URL <- paste0('<',URL,'>')\n      Modulation <- sprintf('select ?nameController ?reference ?nameControlled where {\\n\n                            %s bp:pathwayComponent ?Modulation.\\n\n                            ?Modulation a bp:Modulation.\\n\n                            ?Modulation bp:controller ?controller.\\n\n                            ?controller bp:displayName ?nameController.\\n\n                            ?controller bp:entityReference  ?reference.\\n\n                            ?Modulation bp:controlled ?controlled.\\n\n                            ?controlled bp:displayName ?nameControlled.\\n\n    }',URL)\n    Modulation <- str_replace_all(Modulation, \"[\\r\\n]\" , \"\")\n    Modulation <- SPARQL(url=endpoint, Modulation)$results\n    Modulation$reference <- gsub(\"<|>\",\"\",Modulation$reference)\n    Modulation$reference <- createLink(Modulation$reference)\n  })\n    return(Modulation)\n    })\n  output$table <- DT::renderDataTable(DT::datatable({\n    \n    if (input$dataset ==\"Biochemical Reaction\") {\n      data <- BiochemicalReactions()\n    }\n    else if (input$dataset ==\"Catalysis\") {\n      data <- CatalysisReactions()\n    }\n    else if(input$dataset==\"Control\"){\n      data <- ControlReactions()\n    }\n    else if(input$dataset==\"Template Reaction\"){\n      data <- TemplateReactions()\n    }\n    else if(input$dataset==\"Template Reaction Regulation\"){\n      data <- TemplateReactionRegulations()\n    }\n    else if(input$dataset==\"Degradation\"){\n      data <- DegradationReactions()\n    }\n    else if(input$dataset==\"Modulation\"){\n      data <- ModulationReactions()\n    }\n    \n    \n    \n  },escape = FALSE\n  ))\n  \n  GetOwl <- reactive({\n    URL <- getRowFromDf()\n    getPc(URL)\n  })\n  output$downloadData <- downloadHandler(\n    filename = function() {\n      paste('data-', Sys.Date(), '.owl', sep='')\n    },\n    content = function(file) {\n      \n      a <- saveXML(GetOwl(), file)\n    }\n  )\n  \n  #Visualization\n  observeEvent(input$buttonGraph, {\n    #sif<-toSif(\"www/file251c7b0510f5.owl\")\n    sif<-toSif(GetOwl())\n    #sif <- rbind(sif,c(\"hello\",\"in-complex-with\", \"quease\"))\n    tryCatch({\n      insertUI(\n        selector = \"#graph\",\n        where = \"afterEnd\",\n        ui = tags$div(id=\"graph\" ,class = \"paintGraph\")\n      )\n      links<-parseSifToDataModel(sif)\n      js$paintGraph(links)\n      \n    }, warning = function(w) {\n      warning-handler-code\n    }, error = function(e) {\n      error-handler-code\n    }, finally = {\n    })\n    \n    \n  })\n})",
    "created" : 1516272066018.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "249142988",
    "id" : "5341FF81",
    "lastKnownWriteTime" : 1516401984,
    "last_content_update" : 1516401984751,
    "path" : "C:/Users/cesar/Dropbox/Cuarto/Estándares/RpathDani/Rpath/rpath_app/server.R",
    "project_path" : "rpath_app/server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}