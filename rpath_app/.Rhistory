?TemplateReactionRegulation bp:controller ?controller.\n
?controller bp:displayName ?nameController.\n
?controller bp:entityReference.\n
}',URL)
TemplateReactionRegulation <- str_replace_all(TemplateReactionRegulation, "[\r\n]" , "")
TemplateReactionRegulation <- SPARQL(url=endpoint, TemplateReactionRegulation)$results
TemplateReactionRegulation <- sprintf('select * where {\n
%s bp:pathwayComponent ?TemplateReactionRegulation.\n
?TemplateReactionRegulation a bp:TemplateReactionRegulation.\n
?TemplateReactionRegulation bp:controlled ?controlled.\n
?TemplateReactionRegulation bp:controller ?controller.\n
?controller bp:displayName ?nameController.\n
?controller bp:entityReference.\n
}',URL)
TemplateReactionRegulation <- str_replace_all(TemplateReactionRegulation, "[\r\n]" , "")
TemplateReactionRegulation <- SPARQL(url=endpoint, TemplateReactionRegulation)$results
TemplateReactionRegulation <- sprintf('select * where {\n
%s bp:pathwayComponent ?TemplateReactionRegulation.\n
?TemplateReactionRegulation a bp:TemplateReactionRegulation.\n
}',URL)
TemplateReactionRegulation <- str_replace_all(TemplateReactionRegulation, "[\r\n]" , "")
TemplateReactionRegulation <- SPARQL(url=endpoint, TemplateReactionRegulation)$results
TemplateReactionRegulation <- sprintf('select * where {\n
%s bp:pathwayComponent ?TemplateReactionRegulation.\n
?TemplateReactionRegulation a bp:TemplateReactionRegulation.\n
?TemplateReactionRegulation bp:controlled ?controlled.\n
?TemplateReactionRegulation bp:controller ?controller.\n
?controller bp:displayName ?nameController.\n
?controller bp:entityReference.\n
}',URL)
TemplateReactionRegulation <- str_replace_all(TemplateReactionRegulation, "[\r\n]" , "")
TemplateReactionRegulation <- SPARQL(url=endpoint, TemplateReactionRegulation)$results
TemplateReactionRegulation <- sprintf('select * where {\n
%s bp:pathwayComponent ?TemplateReactionRegulation.\n
?TemplateReactionRegulation a bp:TemplateReactionRegulation.\n
?TemplateReactionRegulation bp:controlled ?controlled.\n
?TemplateReactionRegulation bp:controller ?controller.\n
}',URL)
TemplateReactionRegulation <- str_replace_all(TemplateReactionRegulation, "[\r\n]" , "")
TemplateReactionRegulation <- SPARQL(url=endpoint, TemplateReactionRegulation)$results
TemplateReactionRegulation <- sprintf('select * where {\n
%s bp:pathwayComponent ?TemplateReactionRegulation.\n
?TemplateReactionRegulation a bp:TemplateReactionRegulation.\n
?TemplateReactionRegulation bp:controlled ?controlled.\n
?TemplateReactionRegulation bp:controller ?controller.\n
?controller bp:displayName ?nameController.\n
}',URL)
TemplateReactionRegulation <- str_replace_all(TemplateReactionRegulation, "[\r\n]" , "")
TemplateReactionRegulation <- SPARQL(url=endpoint, TemplateReactionRegulation)$results
TemplateReactionRegulation <- sprintf('select * where {\n
%s bp:pathwayComponent ?TemplateReactionRegulation.\n
?TemplateReactionRegulation a bp:TemplateReactionRegulation.\n
?TemplateReactionRegulation bp:controlled ?controlled.\n
?TemplateReactionRegulation bp:controller ?controller.\n
?controller bp:displayName ?nameController.\n
?controller bp:entityReference ?reference.\n
}',URL)
TemplateReactionRegulation <- str_replace_all(TemplateReactionRegulation, "[\r\n]" , "")
TemplateReactionRegulation <- SPARQL(url=endpoint, TemplateReactionRegulation)$results
TemplateReactionRegulation <- sprintf('select * where {\n
%s bp:pathwayComponent ?TemplateReactionRegulation.\n
?TemplateReactionRegulation a bp:TemplateReactionRegulation.\n
?TemplateReactionRegulation bp:controlled ?controlled.\n
?TemplateReactionRegulation bp:controller ?controller.\n
?controller bp:displayName ?nameController.\n
?controller bp:entityReference ?reference.\n
}',URL)
TemplateReactionRegulation <- str_replace_all(TemplateReactionRegulation, "[\r\n]" , "")
TemplateReactionRegulation <- SPARQL(url=endpoint, TemplateReactionRegulation)$results
URL <- '<http://identifiers.org/reactome/R-HSA-2173788>'
Degradation <- sprintf('select * where {
%s bp:pathwayComponent ?TemplateReactionRegulation.\n
?component a bp:Degradation .\n
?component bp:displayName ?name\n
}',URL)
Degradation <- str_replace_all(Degradation, "[\r\n]" , "")
Degradation <- SPARQL(url=endpoint, Degradation)$results
View(Degradation)
Degradation <- sprintf('select * where {
%s bp:pathwayComponent ?Degradation\n
?Degradation a bp:Degradation .\n
?Degradation bp:displayName ?name\n
}',URL)
Degradation <- str_replace_all(Degradation, "[\r\n]" , "")
Degradation <- SPARQL(url=endpoint, Degradation)$results
Degradation <- sprintf('select * where {\n
%s bp:pathwayComponent ?Degradation\n
?Degradation a bp:Degradation .\n
?Degradation bp:displayName ?name\n
}',URL)
Degradation <- str_replace_all(Degradation, "[\r\n]" , "")
Degradation <- SPARQL(url=endpoint, Degradation)$results
Degradation <- sprintf('select * where {\n
%s bp:pathwayComponent ?Degradation.\n
?Degradation a bp:Degradation .\n
?Degradation bp:displayName ?name. \n
}',URL)
Degradation <- str_replace_all(Degradation, "[\r\n]" , "")
Degradation <- SPARQL(url=endpoint, Degradation)$results
URL <- '<http://pathwaycommons.org/pc2/Pathway_517cbaeaa140454a37a722ea49b653df>'
Modulation <- sprintf('select * where {\n
%s bp:pathwayComponent ?Modulation.\n
?Modulation a bp:Modulation.\n
?Modulation bp:controller ?controller.\n
?controller bp:displayName ?nameController.\n
?controller bp:entityReference  ?reference.\n
?component bp:controlled ?controlled.\n
?controlled bp:displayName ?nameControlled.\n
}',URL)
Modulation <- str_replace_all(Modulation, "[\r\n]" , "")
library(SPARQL)
library(stringr)
Modulation <- str_replace_all(Modulation, "[\r\n]" , "")
Modulation <- SPARQL(url=endpoint, Modulation)$results
Modulation <- sprintf('select * where {\n
%s bp:pathwayComponent ?Modulation.\n
?Modulation a bp:Modulation.\n
?Modulation bp:controller ?controller.\n
?controller bp:displayName ?nameController.\n
?controller bp:entityReference  ?reference.\n
?Modulation bp:controlled ?controlled.\n
?controlled bp:displayName ?nameControlled.\n
}',URL)
Modulation <- str_replace_all(Modulation, "[\r\n]" , "")
Modulation <- SPARQL(url=endpoint, Modulation)$results
shiny::runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
library(paxtoolsr)
pcFormats()
library(paxtoolsr)
getPc(URL)
Sys.setenv(http_proxy="http://proxy.wifi.uma.es:3128/")
getPc(URL)
URL
getPc("http://identifiers.org/panther.pathway/P02762")
getPc("http://identifiers.org/panther.pathway/P02762","SBGN")
shiny::runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
gsub("\xbb","","aa\xbbcc")
View(BiochemicalReaction)
gsub("<","",BiochemicalReaction$nleft)
gsub("<","",BiochemicalReaction$leftReference)
gsub("<"|">","",BiochemicalReaction$leftReference)
gsub("<|>","",BiochemicalReaction$leftReference)
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
library(RWeka)
train=read.arff("ALL-AML_train.arff")
View(train)
variables <-   chi.squared(myclass~., training)
library(FSelector)
variables <-   chi.squared(myclass~., training)
training <- read.arff("ALL-AML_train.arff")
variables <-   chi.squared(myclass~., training)
subset <- cutoff.k(variables, 100)
f <- as.simple.formula(subset, "myclass")
A <- ga("binary", fitness = f, pcrossover=0.8, pmutation=0.1, nBits =
500, monitor = plot, popSize = 30, maxiter = 180)
library(GA)
install.packages(ga)
install.packages("GA")
library(GA)
A <- ga("binary", fitness = f, pcrossover=0.8, pmutation=0.1, nBits =
500, monitor = plot, popSize = 30, maxiter = 180)
fitness <- function(indices) {
result = -1
if (sum(indices) > 1) {
z <- lda(X[,indices==1], Y)
Pr <- predict(z,X[,indices==1])$class
result=-classError(Y,Pr)$errorRate - factor*sum(indices)/500
}
}
library(rminer)
test <- read.arff("ALL-AML_test.arff")
lr.fit <- glm(f, data = training,family = binomial("logit"))
lr.test <-round( predict(lr.fit,newdata =test,type ="response"))
lr.training<-round( predict(lr.fit,newdata =training,type ="response"))
lr.test[lr.test=='0'] <- 'NO'
lr.test[lr.test=='1'] <- 'SI'
lr.training[lr.training=='0'] <- 'NO'
lr.training[lr.training=='1'] <- 'SI'
lr.training
lr.test
lr.test <-round( predict(lr.fit,newdata =test,type ="response"))
lr.training<-round( predict(lr.fit,newdata =training,type ="response"))
lr.test
fitness(lr.test)
library(mclust)
library(Hmisc)
library(MASS)
fitness <- function(indices) {
result = -1
if (sum(indices) > 1) {
z <- lda(X[,indices==1], Y)
Pr <- predict(z,X[,indices==1])$class
result=-classError(Y,Pr)$errorRate - factor*sum(indices)/500
}
}
fitness(lr.test)
library(RWeka)
library(FSelector)
library(GA)
library(rminer)
library(mclust)
library(Hmisc)
library(MASS)
training <- read.arff("ALL-AML_train.arff")
test <- read.arff("ALL-AML_test.arff")
variables <-   chi.squared(myclass~., training)
z <- lda(training[,indices==1], "myclass")
X[7130]
training[7130]
fitness <- function(indices) {
result = -1
if (sum(indices) > 1) {
z <- lda(training[,indices==1], X[7130])
Pr <- predict(z,training[,indices==1])$class
result=-classError(X[7130],Pr)$errorRate - factor*sum(indices)/500
}
}
A <- ga("binary", fitness = fitness, pcrossover=0.8, pmutation=0.1, nBits =500, monitor = plot, popSize = 30, maxiter = 180)
fitness <- function(indices) {
result = -1
if (sum(indices) > 1) {
z <- lda(training[,indices==1], training[7130])
Pr <- predict(z,training[,indices==1])$class
result=-classError(training[7130],Pr)$errorRate - factor*sum(indices)/500
}
}
A <- ga("binary", fitness = fitness, pcrossover=0.8, pmutation=0.1, nBits =500, monitor = plot, popSize = 30, maxiter = 180)
A <- ga("binary", fitness = fitness, pcrossover=0.8, pmutation=0.1,
nBits =500, monitor = plot, popSize = 30, maxiter = 180)
training[7130]
A <- ga("binary", fitness = fitness, pcrossover=0.8, pmutation=0.1,
nBits =500, monitor = plot, popSize = 30, maxiter = 180)
training[max()]
z <- lda(training[,indices==1], training[7130])
variables <-   chi.squared(myclass~., training)
subset <- cutoff.k(variables, 100)
f <- as.simple.formula(subset, "myclass")
f
fitness <- function(indices) {
result = -1
if (sum(indices) > 1) {
z <- lda(f,training[,indices==1], training[7130])
Pr <- predict(z,training[,indices==1])$class
result=-classError(training[7130],Pr)$errorRate - factor*sum(indices)/500
}
}
A <- ga("binary", fitness = fitness, pcrossover=0.8, pmutation=0.1,
nBits =500, monitor = plot, popSize = 30, maxiter = 180)
training$atribute1882
View(training)
training$attribute1882
fitness <- function(indices) {
result = -1
if (sum(indices) > 1) {
z <- lda(f,training)
Pr <- predict(z,training[,indices==1])$class
result=-classError(training[7130],Pr)$errorRate - factor*sum(indices)/500
}
}
A <- ga("binary", fitness = fitness, pcrossover=0.8, pmutation=0.1,
nBits =500, monitor = plot, popSize = 30, maxiter = 180)
z <- lda(f,training)
z
lda(f,training)
fitness <- function(indices) {
result = -1
if (sum(indices) > 1) {
z <- lda(f,training)
Pr <- predict(z,training[,indices==1])$class
result=-classError(training[7130],Pr)$errorRate - factor*sum(indices)/500
}
}
A <- ga("binary", fitness = fitness, pcrossover=0.8, pmutation=0.1,
nBits =500, monitor = plot, popSize = 30, maxiter = 180)
fitness <- function(indices) {
result = -1
if (sum(indices) > 1) {
z <- lda(f,training[,indices==1])
Pr <- predict(z,training[,indices==1])$class
result=-classError(training[7130],Pr)$errorRate - factor*sum(indices)/500
}
}
A <- ga("binary", fitness = fitness, pcrossover=0.8, pmutation=0.1,
nBits =500, monitor = plot, popSize = 30, maxiter = 180)
fitness <- function(indices) {
result = -1
if (sum(indices) > 1) {
z <- lda(f,training[,indices==1],training[7130])
Pr <- predict(z,training[,indices==1])$class
result=-classError(training[7130],Pr)$errorRate - factor*sum(indices)/500
}
}
A <- ga("binary", fitness = fitness, pcrossover=0.8, pmutation=0.1,
nBits =500, monitor = plot, popSize = 30, maxiter = 180)
shiny::runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
install.packages('igraph')
install.packages('STRINGdb')
install.packages(“linkcomm”)
install.packages('linkcomm')
library(igraph)
library(STRINGdb)
library(linkcomm)
library(dplyr)
stringdb <− STRINGdb$new(version=”10” , species =9606,scorethreshold =400, inputdirectory=”” )
r -version
r -v
library(igraph)
library(STRINGdb)
install.packages('STRINGdb')
library(linkcomm)
library(dplyr)
source(“https://bioconductor.org/biocLite.R”)
biocLite(“STRINGdb”)
source(“https://bioconductor.org/biocLite.R”)
source("https://bioconductor.org/biocLite.R")
biocLite("STRINGdb")
library(igraph)
library(STRINGdb)
library(linkcomm)
library(dplyr)
stringdb <− STRINGdb$new(version=”10” , species =9606,scorethreshold =400, inputdirectory=”” )
stringdb <− STRINGdb$new(version="10" , species =9606,score_threshold =400, input_directory=”” )
stringdb <− STRINGdb$new(version="10" , species =9606,score_threshold =400, input_directory="" )
library(igraph)
library(STRINGdb)
library(linkcomm)
library(dplyr)
stringdb <− STRINGdb$new(version="10" , species =9606,score_threshold =400, input_directory="" )
STRINGdb$help("import")
string.network <− stringdb$get_graph()
STRINGdb$methods()
data(diff_exp_example1)
head(diff_exp_example1)
hits <−(filter(example1_mapped,pvalue<=0.05 & logFC>=1.2) )$STRING_id
example1_mapped <− stringdb$map(diff_exp_example1 , "gene" , removeUnmappedRows = TRUE )
hits <−(filter(example1_mapped,pvalue<=0.05 & logFC>=1.2) )$STRING_id
stringdb$plotnetwork(hits)
string_db$plotnetwork(hits)
string_db$plot_network(hits)
stringdb$plot_network(hits)
hits.subnet <− make_ego_graph(graph = string.network ,
order = 1 ,
nodes= hits[hits%in%V(string.network)$name ]
)
stringdb$plot_network(hits)
Sys.setenv(http_proxy="http://proxy.wifi.uma.es:3128/")
stringdb$plot_network(hits)
hits.subnet <− make_ego_graph(graph = string.network ,
order = 1 ,
nodes= hits[hits%in%V(string.network)$name ]
)
stringdb$plot_network(hits)
stringdb$plot_network(hits)
stringdb$plot_network(hits)
stringdb$plot_network(hits)
hits <− (filter(example1_mapped , pvalue <=0.01) )$STRING_id
stringdb$plot_network(hits)
hits <−(filter(example1_mapped,pvalue<=0.05 & logFC>=1.2) )$STRING_id
stringdb$plot_network(hits)
library(igraph)
library(STRINGdb)
library(linkcomm)
library(dplyr)
stringdb <− STRINGdb$new(version="10" , species =9606,score_threshold =400, input_directory="" ) # con la version 10 y con el homo sapiens,treshold:numero de conexiones
STRINGdb$methods()
STRINGdb$help("import")
string.network <− stringdb$get_graph()
data(diff_exp_example1)
head(diff_exp_example1)
example1_mapped <− stringdb$map(diff_exp_example1 , "gene" , removeUnmappedRows = TRUE )
hits <− (filter(example1_mapped , pvalue <=0.01) )$STRING_id
hits <−(filter(example1_mapped,pvalue<=0.05 & logFC>=1.2) )$STRING_id
hits.subnet <− make_ego_graph(graph = string.network ,
order = 1 ,
nodes= hits[hits%in%V(string.network)$name ]
)
stringdb$plot_network(hits)
Sys.setenv(http_proxy="http://proxy.wifi.uma.es:3128/")
hits.network <− stringdb$get_subnetwork(hits)
stringdb$plot_network(hits)
hits.network <− stringdb$get_subnetwork(hits)
first.neigh<− (neighbors(graph = string.network,v = V(hits.network)$name,mode = "all"))$name
hits.network <− stringdb$get_subnetwork(unique( c(V(hits.network)$name , first.neigh) ) )
library(igraph)
library(STRINGdb)
library(linkcomm)
library(dplyr)
stringdb<- STRINGdb$new(version="10" , species =9606,score_threshold =400, input_directory="" ) # con la version 10 y con el homo sapiens,treshold:numero de conexiones
STRINGdb$methods()
STRINGdb$help("import")
stringdb<- STRINGdb$new(version="10" , species =9606,score_threshold =400, input_directory="" ) # con la version 10 y con el homo sapiens,treshold:numero de conexiones
STRINGdb$methods()
STRINGdb$help("import")
string.network<- stringdb$get_graph()
data(diff_exp_example1)
example1_mapped<- stringdb$map(diff_exp_example1 , "gene" , removeUnmappedRows = TRUE )
example1_mapped
hits <- (filter(example1_mapped , pvalue <=0.01) )$STRING_id
hits <- (filter(example1_mapped,pvalue<=0.05 & logFC>=1.2) )$STRING_id
hits.subnet <-  make_ego_graph(graph = string.network ,
order = 1 ,
nodes= hits[hits%in%V(string.network)$name ]
)
stringdb$plot_network(hits)
1+1
hits <−(filter(example1_mapped , pvalue <=0.05 & logFC<=−1.2) )$STRING_id
library(igraph)
library(STRINGdb)
library(linkcomm)
library(dplyr)
hits <- (filter(example1_mapped , pvalue <=0.05 & logFC<=−1.2) )$STRING_id
hits.subnet <-  make_ego_graph(graph = string.network ,
order = 1 ,
nodes= hits[hits%in%V(string.network)$name ]
)
stringdb$plot_network(hits)
hits.network <-  stringdb$get_subnetwork(hits)
first.neigh <-  (neighbors(graph = string.network,v = V(hits.network)$name,mode = "all"))$name
hits.network <-  stringdb$get_subnetwork(unique( c(V(hits.network)$name , first.neigh) ) )
second.neigh <- neighbors(graph = string.network, v = V(hits.network)$name, mode="all")
hits.network<-string_db$get_subnetwork(unique(c(V(hits.network)$name, second.neigh)))
c1<-components(hits.network)
knitr::opts_chunk$set(echo = TRUE)
hits <- (filter(example1_mapped , pvalue <=0.05 & logFC<=−1.2) )$STRING_id
library(igraph)
library(STRINGdb)
library(linkcomm)
library(dplyr)
stringdb<- STRINGdb$new(version="10" , species =9606,score_threshold =400, input_directory="" ) # con la version 10 y con el homo sapiens,treshold:numero de conexiones
STRINGdb$methods()
STRINGdb$help("import")
string.network<- stringdb$get_graph()
data(diff_exp_example1)
hits <- (filter(example1_mapped , pvalue <=0.01) )$STRING_id
example1_mapped<- stringdb$map(diff_exp_example1 , "gene" , removeUnmappedRows = TRUE )
data(diff_exp_example1)
example1_mapped<- stringdb$map(diff_exp_example1 , "gene" , removeUnmappedRows = TRUE )
hits <- (filter(example1_mapped , pvalue <=0.01) )$STRING_id
hits <- (filter(example1_mapped,pvalue<=0.05 & logFC>=1.2) )$STRING_id
hits <- (filter(example1_mapped , pvalue <=0.05 & logFC<=−1.2) )$STRING_id
hits <- (filter(example1_mapped , pvalue <=0.01) )$STRING_id
hits <- (filter(example1_mapped , pvalue <=0.05 & logFC<=−1.2) )$STRING_id
hits.subnet <-  make_ego_graph(graph = string.network ,
order = 1 ,
nodes= hits[hits%in%V(string.network)$name ]
)
stringdb$plot_network(hits)
library(igraph)
library(STRINGdb)
library(linkcomm)
library(dplyr)
string_db<- STRINGdb$new(version="10" , species =9606,score_threshold =400, input_directory="" )
STRINGdb$methods()
STRINGdb$help("import")
string.network<- string_db$get_graph()
shiny::runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
shiny::runApp('CuartoCurso/Estandares/roto2/Rpath/rpath_app')
